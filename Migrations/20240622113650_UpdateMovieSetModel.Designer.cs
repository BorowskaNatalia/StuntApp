// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stunt.Context;

#nullable disable

namespace Stunt.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240622113650_UpdateMovieSetModel")]
    partial class UpdateMovieSetModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("HorseTraining", b =>
                {
                    b.Property<int>("HorsesIdHorse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingsIdTraining")
                        .HasColumnType("INTEGER");

                    b.HasKey("HorsesIdHorse", "TrainingsIdTraining");

                    b.HasIndex("TrainingsIdTraining");

                    b.ToTable("HorseTraining");
                });

            modelBuilder.Entity("Stunt.Models.Horse", b =>
                {
                    b.Property<int>("IdHorse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdHorse");

                    b.ToTable("Horses");
                });

            modelBuilder.Entity("Stunt.Models.Location", b =>
                {
                    b.Property<int>("IdLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdLocation");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Stunt.Models.MovieHorse", b =>
                {
                    b.Property<int>("IdMovieSet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdHorse")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("IdMovieSet", "IdHorse");

                    b.HasIndex("IdHorse");

                    b.ToTable("MovieHorses");
                });

            modelBuilder.Entity("Stunt.Models.MovieSet", b =>
                {
                    b.Property<int>("IdMovieSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adderss")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Budget")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMovieSet");

                    b.ToTable("MovieSets");
                });

            modelBuilder.Entity("Stunt.Models.MovieStuntman", b =>
                {
                    b.Property<int>("IdMovieSet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerson")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieStuntmanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("IdMovieSet", "IdPerson");

                    b.HasIndex("IdPerson");

                    b.ToTable("MovieStuntmans");
                });

            modelBuilder.Entity("Stunt.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("IdPerson");

                    b.ToTable("People", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Stunt.Models.Training", b =>
                {
                    b.Property<int>("IdTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdLocation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdStuntLeader")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdTraining");

                    b.HasIndex("IdStuntLeader");

                    b.HasIndex("IdLocation", "DateTime")
                        .IsUnique();

                    b.ToTable("Trainings", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Stunt.Models.TrainingTypeMapping", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainingType")
                        .HasColumnType("TEXT");

                    b.HasKey("TrainingId", "TrainingType");

                    b.ToTable("TrainingTypeMappings");
                });

            modelBuilder.Entity("StuntmanTraining", b =>
                {
                    b.Property<int>("StuntmansIdPerson")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingsIdTraining")
                        .HasColumnType("INTEGER");

                    b.HasKey("StuntmansIdPerson", "TrainingsIdTraining");

                    b.HasIndex("TrainingsIdTraining");

                    b.ToTable("StuntmanTraining");
                });

            modelBuilder.Entity("Stunt.Models.Owner", b =>
                {
                    b.HasBaseType("Stunt.Models.Person");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Stunt.Models.StuntLeader", b =>
                {
                    b.HasBaseType("Stunt.Models.Person");

                    b.ToTable("StuntLeaders", (string)null);
                });

            modelBuilder.Entity("Stunt.Models.Stuntman", b =>
                {
                    b.HasBaseType("Stunt.Models.Person");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.ToTable("Stuntmen", (string)null);
                });

            modelBuilder.Entity("Stunt.Models.ExamTraining", b =>
                {
                    b.HasBaseType("Stunt.Models.Training");

                    b.Property<string>("ExaminerLicence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("ExamTrainings", (string)null);
                });

            modelBuilder.Entity("Stunt.Models.GroupTraining", b =>
                {
                    b.HasBaseType("Stunt.Models.Training");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.ToTable("GroupTrainings", (string)null);
                });

            modelBuilder.Entity("HorseTraining", b =>
                {
                    b.HasOne("Stunt.Models.Horse", null)
                        .WithMany()
                        .HasForeignKey("HorsesIdHorse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stunt.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsIdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.MovieHorse", b =>
                {
                    b.HasOne("Stunt.Models.Horse", "Horse")
                        .WithMany("Movies")
                        .HasForeignKey("IdHorse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stunt.Models.MovieSet", "MovieSet")
                        .WithMany("Horses")
                        .HasForeignKey("IdMovieSet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("MovieSet");
                });

            modelBuilder.Entity("Stunt.Models.MovieStuntman", b =>
                {
                    b.HasOne("Stunt.Models.MovieSet", "MovieSet")
                        .WithMany("Stuntmans")
                        .HasForeignKey("IdMovieSet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stunt.Models.Stuntman", "Stuntman")
                        .WithMany("MovieSets")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSet");

                    b.Navigation("Stuntman");
                });

            modelBuilder.Entity("Stunt.Models.Training", b =>
                {
                    b.HasOne("Stunt.Models.Location", "Location")
                        .WithMany("Trainings")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stunt.Models.StuntLeader", "StuntLeader")
                        .WithMany("ConductedTrainings")
                        .HasForeignKey("IdStuntLeader")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("StuntLeader");
                });

            modelBuilder.Entity("Stunt.Models.TrainingTypeMapping", b =>
                {
                    b.HasOne("Stunt.Models.Training", "Training")
                        .WithMany("TrainingTypes")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("StuntmanTraining", b =>
                {
                    b.HasOne("Stunt.Models.Stuntman", null)
                        .WithMany()
                        .HasForeignKey("StuntmansIdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stunt.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsIdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.StuntLeader", b =>
                {
                    b.HasOne("Stunt.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Stunt.Models.StuntLeader", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.Stuntman", b =>
                {
                    b.HasOne("Stunt.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Stunt.Models.Stuntman", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.ExamTraining", b =>
                {
                    b.HasOne("Stunt.Models.Training", null)
                        .WithOne()
                        .HasForeignKey("Stunt.Models.ExamTraining", "IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.GroupTraining", b =>
                {
                    b.HasOne("Stunt.Models.Training", null)
                        .WithOne()
                        .HasForeignKey("Stunt.Models.GroupTraining", "IdTraining")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stunt.Models.Horse", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Stunt.Models.Location", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("Stunt.Models.MovieSet", b =>
                {
                    b.Navigation("Horses");

                    b.Navigation("Stuntmans");
                });

            modelBuilder.Entity("Stunt.Models.Training", b =>
                {
                    b.Navigation("TrainingTypes");
                });

            modelBuilder.Entity("Stunt.Models.StuntLeader", b =>
                {
                    b.Navigation("ConductedTrainings");
                });

            modelBuilder.Entity("Stunt.Models.Stuntman", b =>
                {
                    b.Navigation("MovieSets");
                });
#pragma warning restore 612, 618
        }
    }
}
